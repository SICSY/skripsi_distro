import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ClerkProvider } from "@clerk/nextjs";
import Layout from "@/src/dom/Layout";
import { currentUser } from "@clerk/nextjs/server";
import prisma from "@/lib/prisma";
import { Role } from "@prisma/client";
import { Toaster } from "sonner";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"]
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"]
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app"
};

export default async function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode;
}>) {
  const user = await currentUser();
  let role: Role = Role.MEMBER;
  const rawRole = user?.publicMetadata.role;
  if (typeof rawRole === "string") {
    const upperRole = rawRole.toUpperCase();

    if (Object.values(Role).includes(upperRole as Role)) {
      role = upperRole as Role;
    }
  }

  if (user) {
    await prisma.user.upsert({
      where: { providerId: user.id },
      update: {},
      create: {
        providerId: user.id,
        email: user.emailAddresses[0].emailAddress || "",
        name: user.firstName || "",
        role
      }
    });
  }
  return (
    <ClerkProvider
      appearance={{
        cssLayerName: "clerk"
      }}
    >
      <html lang='en'>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          <Toaster />
          <Layout>{children}</Layout>
          {/* {children} */}
        </body>
      </html>
    </ClerkProvider>
  );
}
